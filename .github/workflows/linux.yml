name: Linux CI

on:
  pull_request:

env:
  DOCKER_VERSION: 19.03.8
  DOCKER_COMPOSE_VERSION: 1.29.0

jobs:
  deploy-gcp-instances:
    if: "!contains(github.event.head_commit.message, 'skip-linux-ci')"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        runner: [ 1, 2 ]
    env:
      IMAGE_NAME: gh-runner-1619164281
      INSTANCE_NAME: gh-runner-${{ github.sha }}-${{ matrix.runner }}
    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT }}
          service_account_key: ${{ secrets.GOOGLE_SA_KEY }}
          export_default_credentials: true
      - name: Create runner
        run: |
          gcloud compute instances create ${INSTANCE_NAME} \
            --project=${{ secrets.GOOGLE_PROJECT }} \
            --zone=${{ secrets.GOOGLE_ZONE }} \
            --subnet=default \
            --machine-type=e2-standard-4 \
            --boot-disk-size=200GB \
            --boot-disk-type=pd-standard \
            --boot-disk-device-name=${INSTANCE_NAME} \
            --image-project=${{ secrets.GOOGLE_PROJECT }} \
            --image=${{ env.IMAGE_NAME }} \
            --service-account "${{ secrets.GOOGLE_SVC_ACC }}" \
            --scopes="https://www.googleapis.com/auth/cloud-platform" \
            --metadata repository=${{ github.repository }},pat_version=1
      - name: Start GitHub runner application
        run: |
          sleep 60
          gcloud compute ssh --zone ${{ secrets.GOOGLE_ZONE }} ${INSTANCE_NAME} -- \
                                         'sudo /var/opt/gh-runner/startup-script.sh'
  upload-docker-images:
    if: "!contains(github.event.head_commit.message, 'skip-linux-ci')"
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-16.04, ubuntu-18.04, ubuntu-20.04, rhel-7, rhel-8, centos-7, centos-8 ]
    env:
      BASE_IMAGE: docker.pkg.github.com/${{ github.repository }}/base-${{ matrix.os }}:${{ github.sha }}
      IMAGE_NAME: docker.pkg.github.com/${{ github.repository }}/source-${{ matrix.os }}:${{ github.sha }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Build base image
        run: |
          docker build -t "${BASE_IMAGE}" docker/${{ matrix.os }}
      - name: Build source image
        run: |
          docker build -t "${IMAGE_NAME}" \
                 --build-arg commit="${{ github.sha }}" \
                 --build-arg repository="${{ github.repository }}" \
                 --build-arg base_image="${{ env.BASE_IMAGE }}" \
                 ci/docker/source
      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push image to GitHub Containers Registry
        run: |
          docker push "${IMAGE_NAME}"

  unit-test:
    if: "!contains(github.event.head_commit.message, 'skip-linux-ci')"
    runs-on: ubuntu-latest
    needs:
      - upload-docker-images
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-16.04, ubuntu-18.04, ubuntu-20.04, rhel-7, rhel-8, centos-7, centos-8 ]
    container:
      image: docker.pkg.github.com/${{ github.repository }}/source-${{ matrix.os }}:${{ github.sha }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Execute tests
        run: |
          if ! /build/cppcache/test/apache-geode_unittests --gtest_shuffle; then
            echo "retrying tests"
            /build/cppcache/test/apache-geode_unittests --gtest_shuffle
          fi

  old-integration-test:
    if: "!contains(github.event.head_commit.message, 'skip-linux-ci')"
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-16.04, ubuntu-18.04, ubuntu-20.04, rhel-7, rhel-8, centos-7, centos-8 ]
    container:
      image: docker.pkg.github.com/${{ github.repository }}/source-${{ matrix.os }}:${{ github.sha }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    needs:
      - deploy-gcp-instances
      - upload-docker-images
    steps:
      - name: Execute tests
        run: |
          cmake -E chdir /build/cppcache/integration-test \
          ctest --timeout 500 -C Debug -j$(( $(nproc) / 3 + 1 )) --output-on-failure --schedule-random --repeat until-pass:3

  new-integration-test:
    if: "!contains(github.event.head_commit.message, 'skip-linux-ci')"
    runs-on: ubuntu-latest
    needs:
      - upload-docker-images
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-16.04, ubuntu-18.04, ubuntu-20.04, rhel-7, rhel-8, centos-7, centos-8 ]
    container:
      image: docker.pkg.github.com/${{ github.repository }}/source-${{ matrix.os }}:${{ github.sha }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Execute tests
        run: |
          cmake -E chdir /build/cppcache/integration/test \
          ctest --timeout 500 -j$(( $(nproc) / 3 + 1 )) --output-on-failure --schedule-random --repeat until-pass:3

  test-ipv6:
    if: "!contains(github.event.head_commit.message, 'skip-linux-ci')"
    runs-on: ubuntu-latest
    needs:
      - upload-docker-images
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-16.04, ubuntu-18.04, ubuntu-20.04, rhel-7, rhel-8, centos-7, centos-8 ]
    container:
      image: docker.pkg.github.com/${{ github.repository }}/source-${{ matrix.os }}:${{ github.sha }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Execute tests
        run: cmake -E chdir /build/cppcache/integration/test ctest -R BasicIPv6Test -j$(nproc) --output-on-failure --schedule-random

  acceptance-test:
#    if: "!contains(github.event.head_commit.message, 'skip-linux-ci')"
    if: false
    runs-on: ubuntu-latest
    needs:
      - upload-docker-images
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-16.04, ubuntu-18.04, ubuntu-20.04, rhel-7, rhel-8, centos-7, centos-8 ]
    container:
      image: docker.pkg.github.com/${{ github.repository }}/source-${{ matrix.os }}:${{ github.sha }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Install Docker client
        run: |
          export DOCKER_URL="https://download.docker.com/linux/static/stable/x86_64/docker-19.03.8.tgz" && \
          curl -fsSL "${DOCKER_URL}" | tar zxvf - --strip 1 -C /usr/bin docker/docker && \
          unset DOCKER_URL && \
          export DOCKER_COMPOSE_URL="https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" && \
          curl -L "${DOCKER_COMPOSE_URL}" -o /usr/bin/docker-compose && \
          chmod 700 /usr/bin/docker-compose && \
          unset DOCKER_COMPOSE_URL
      - name: Replace volumes path
        run: |
          sed -i "s/\.\/haproxy.cfg/$(echo "${{ github.workspace }}/sni-test-config/haproxy.cfg" | sed 's/\//\\\//g')/g" sni-test-config/docker-compose.yml
          sed -i "s/\.\/geode-config/$(echo "${{ github.workspace }}/sni-test-config/geode-config" | sed 's/\//\\\//g')/g" sni-test-config/docker-compose.yml
          sed -i "s/\.\/scripts/$(echo "${{ github.workspace }}/sni-test-config/scripts" | sed 's/\//\\\//g')/g" sni-test-config/docker-compose.yml
      - name: Set localhost IP
        run: echo "$(/sbin/ip route|awk '/default/ { print $3 }')   localhost" > /etc/hosts
      - name: Execute tests
        run: cmake -E chdir /build/cppcache/acceptance-test ctest -j1 --output-on-failure --schedule-random

  delete-docker-images:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      - upload-docker-images
      - unit-test
      - old-integration-test
      - new-integration-test
      - test-ipv6
      - acceptance-test
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-16.04, ubuntu-18.04, ubuntu-20.04, rhel-7, rhel-8, centos-7, centos-8 ]
    steps:
      - name: Obtain package ID
        id: package-id
        uses: actions/github-script@v3
        with:
          script: |
            const query = `query($owner:String!, $name:String!, $image:String!, $tag:String!) {
              repository(owner:$owner, name:$name){
                packages(names:[$image], first: 1) {
                  nodes {
                    version(version:$tag) {
                      id
                    }
                  }
                }
              }
            }`;

            console.log(context.payload.inputs)
            const variables = {
              owner: context.repo.owner,
              name: context.repo.repo,
              image: `docker.pkg.github.com/${{ github.repository }}/source-${{ matrix.os }}`,
              tag: github.sha
            }

            const result = await github.graphql(query, variables)
            const package_id = result["repository"]["packages"]["nodes"][0]["version"]["id"]
            console.log("Package ID is " + package_id)
            return package_id
          result-encoding: string

      - name: Delete package
        uses: actions/delete-package-versions@v1
        with:
          package-version-ids: '${{steps.package-id.outputs.result}}'

  destroy-gcp-instances:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      - deploy-gcp-instances
      - upload-docker-images
      - old-integration-test
    strategy:
      fail-fast: false
      matrix:
        runner: [ 1, 2 ]
    env:
      INSTANCE_NAME: gh-runner-${{ github.sha }}-${{ matrix.runner }}
    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT }}
          service_account_key: ${{ secrets.GOOGLE_SA_KEY }}
          export_default_credentials: true

      - name: Stop GitHub runner application
        run: |
          gcloud compute ssh --zone ${{ secrets.GOOGLE_ZONE }} ${INSTANCE_NAME} -- \
                                         'sudo /var/opt/gh-runner/shutdown-script.sh'
      - name: Destroy runner
        if: ${{ always() }}
        run: |
          gcloud compute instances delete --zone ${{ secrets.GOOGLE_ZONE }} ${INSTANCE_NAME}
